#include <iostream>
#include <fstream>
#include <string>
#include "TFile.h"
#include "TTree.h"

using namespace std;

// Given result file from the SHMS calorimeter simulation, Generate
// root file output.

void make_root(string inp_name) {

  // Input and output.

  string inp_file = inp_name + ".r";
  string out_file = inp_name + ".root";
  cout << inp_file << " ==> " << out_file << endl;

  ifstream fin;
  fin.open(inp_file.c_str(),ios::in);

  TFile *file_out = new TFile(out_file.c_str(), "Recreate");

  // Variables.

  int nhit;
  double x, y, xp, yp, p;
  int ind;

  const int Nrows_pr = 14;
  const int Nrows_sh = 16;
  const int Ncols_sh = 14;

  int adc_neg_pr[Nrows_pr];
  int adc_pos_pr[Nrows_pr];
  int adc_sh[Nrows_sh][Ncols_sh];

  // Output tree.

  TTree *tr = new TTree("T", "SHMS calo. MC events");
  tr->Branch("S.pr.aneg_p", &adc_neg_pr, "S.pr.aneg_p/I");
  tr->Branch("S.pr.apos_p", &adc_pos_pr, "S.pr.apos_p/I");
  tr->Branch("S.sh.a_p",    &adc_sh,     "S.sh.a_p/I");
  tr->Branch("S.tr.x", &x, "S.tr.y/D");      // swap X in MC and Y in hcana
  tr->Branch("S.tr.y", &y, "S.tr.x/D");      // swap X in MC and Y in hcana
  tr->Branch("S.tr.th", &yp, "S.tr.th/D");   // swap Xp in MC and Yp in hcana
  tr->Branch("S.tr.ph", &xp, "S.tr.ph/D");   // swap Xp in MC and Yp in hcana
  tr->Branch("S.tr.p",  &p,  "S.tr.p/D");

  // Read and tree fill cicle.

  while (fin >> nhit >> x >> y >> xp >> yp >> p >> ind) {
    //    cout << nhit << " " << x << " " << y << " " << xp << " " << yp << " "
    //	 << p << " " << ind << endl;

    for (int i=0; i<Nrows_pr; i++) {
      adc_neg_pr[i] = 0.;
      adc_pos_pr[i] = 0.;
    }

    for (int i=0; i<Nrows_sh; i++)
      for (int k=0; k<Ncols_sh; k++)
	adc_sh[i][k] = 0.;

    for (int i=0; i<nhit; i++) {

      int adc, row, col, det;
      fin >> adc >> row >> col >> det;
      //      cout << adc << " " << row << " " << col << " " << det << endl;

      if (adc > 0.) {
	switch (det) {
	case 1:
	  switch (col) {
	  case 1:
	    adc_pos_pr[row-1] = adc;
	    break;
	  case 2:
	    adc_neg_pr[row-1] = adc;
	    break;
	  default:
	    cout << "*** Wrong column in Preshower: " << col << " ***" << endl;
	  }
	case 2:
	  adc_sh[row-1][col-1] = adc;
	  break;
	default:
	  cout << "*** Wrong detector: " << det << " ***" << endl;
	}
      }

    }   //hits

    tr->Fill();

  }     //events

  tr->Write();

  fin.close();
  file_out->Close();
}
